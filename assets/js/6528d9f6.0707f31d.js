"use strict";(self.webpackChunkbulldog_computer_club_website=self.webpackChunkbulldog_computer_club_website||[]).push([[276],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=i.createContext({}),p=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,m=d["".concat(u,".").concat(h)]||d[h]||s[h]||a;return n?i.createElement(m,o(o({ref:t},c),{},{components:n})):i.createElement(m,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1449:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const a={title:"Parent-Teacher Conference Scheduling",sidebar_position:5},o="Parent-Teacher Conference Scheduling",l={unversionedId:"archive/weekly-questions/parent-teacher-conference-scheduling",id:"archive/weekly-questions/parent-teacher-conference-scheduling",title:"Parent-Teacher Conference Scheduling",description:"Recently, the students of Sir Winston Churchill Secondary have been signing up for parent-teacher conferences. When signing up, students provide a preferred start time for their conference, in addition to a duration in minutes. End times are inclusive, so if the start time was $5$ minutes after midnight and the duration was $6$ the conference would still be going on at minute $11$.",source:"@site/docs/archive/weekly-questions/parent-teacher-conference-scheduling.md",sourceDirName:"archive/weekly-questions",slug:"/archive/weekly-questions/parent-teacher-conference-scheduling",permalink:"/docs/archive/weekly-questions/parent-teacher-conference-scheduling",draft:!1,editUrl:"https://github.com/bulldog-computer-club/bulldog-computer-club.github.io/edit/main/docs/archive/weekly-questions/parent-teacher-conference-scheduling.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Parent-Teacher Conference Scheduling",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Repeated String Transformation",permalink:"/docs/archive/weekly-questions/repeated-string-transformation"},next:{title:"Rotating Array",permalink:"/docs/archive/weekly-questions/rotating-array"}},u={},p=[{value:"Input Specification",id:"input-specification",level:2},{value:"Output Specification",id:"output-specification",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Input",id:"input",level:3},{value:"Output",id:"output",level:3},{value:"Explanation",id:"explanation",level:3},{value:"Example 2",id:"example-2",level:2},{value:"Input",id:"input-1",level:3},{value:"Output",id:"output-1",level:3},{value:"Explanation",id:"explanation-1",level:3},{value:"Example 3",id:"example-3",level:2},{value:"Input",id:"input-2",level:3},{value:"Output",id:"output-2",level:3},{value:"Explanation",id:"explanation-2",level:3},{value:"Example 4",id:"example-4",level:2},{value:"Input",id:"input-3",level:3},{value:"Output",id:"output-3",level:3},{value:"Explanation",id:"explanation-3",level:3},{value:"Example 5",id:"example-5",level:2},{value:"Input",id:"input-4",level:3},{value:"Output",id:"output-4",level:3},{value:"Example 6",id:"example-6",level:2},{value:"Input",id:"input-5",level:3},{value:"Output",id:"output-5",level:3},{value:"Intuition",id:"intuition",level:2},{value:"Code",id:"code",level:2}],c={toc:p};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"parent-teacher-conference-scheduling"},"Parent-Teacher Conference Scheduling"),(0,r.kt)("p",null,"Recently, the students of Sir Winston Churchill Secondary have been signing up for parent-teacher conferences. When signing up, students provide a ",(0,r.kt)("em",{parentName:"p"},"preferred start time")," for their conference, in addition to a ",(0,r.kt)("em",{parentName:"p"},"duration")," in minutes. End times are inclusive, so if the start time was $5$ minutes after midnight and the duration was $6$ the conference would still be going on at minute $11$."),(0,r.kt)("p",null,"You are to write a program that processes sign-ups. More specifically, given a list of sign-up information in chronological order, you should determine, for each sign-up, whether it conflicts with a previously successfully processed sign-up."),(0,r.kt)("h2",{id:"input-specification"},"Input Specification"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The first line will contain an integer $N$, denoting the number of sign-ups to process."),(0,r.kt)("li",{parentName:"ul"},"The next $N$ lines will each contain an integer $T_i$ indicating the start time of the conference as minutes since midnight and an integer $D_i$ indicating the duration of the conference in minutes.")),(0,r.kt)("h2",{id:"output-specification"},"Output Specification"),(0,r.kt)("p",null,"Output $N$ lines, where each line corresponds to a sign-up in the order that they were given. Each line should contain either ",(0,r.kt)("inlineCode",{parentName:"p"},"GOOD"),", if the corresponding sign-up does not conflict with any conference scheduled previously, or ",(0,r.kt)("inlineCode",{parentName:"p"},"BAD")," otherwise."),(0,r.kt)("h1",{id:"examples"},"Examples"),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("h3",{id:"input"},"Input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1\n1 2\n")),(0,r.kt)("h3",{id:"output"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GOOD\n")),(0,r.kt)("h3",{id:"explanation"},"Explanation"),(0,r.kt)("p",null,"There is only one conference scheduled."),(0,r.kt)("h2",{id:"example-2"},"Example 2"),(0,r.kt)("h3",{id:"input-1"},"Input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"2\n1 5\n2 4\n")),(0,r.kt)("h3",{id:"output-1"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GOOD\nBAD\n")),(0,r.kt)("h3",{id:"explanation-1"},"Explanation"),(0,r.kt)("p",null,"The first conferences runs from minute $1$ to $6$, while the second runs from $2$ to $6$, which conflicts with the first."),(0,r.kt)("h2",{id:"example-3"},"Example 3"),(0,r.kt)("h3",{id:"input-2"},"Input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"3\n34 7\n1 2\n2 35\n")),(0,r.kt)("h3",{id:"output-2"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GOOD\nGOOD\nBAD\n")),(0,r.kt)("h3",{id:"explanation-2"},"Explanation"),(0,r.kt)("p",null,"The first conference runs from minute $34$ to $41$. The second runs from minute $1$ to $3$. Finally, the third runs from $2$ to $35$. However, minute $2$ is reserved for the second conference."),(0,r.kt)("h2",{id:"example-4"},"Example 4"),(0,r.kt)("h3",{id:"input-3"},"Input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"4\n1 4\n2 1\n2 7\n6 1\n")),(0,r.kt)("h3",{id:"output-3"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GOOD\nBAD\nBAD\nGOOD\n")),(0,r.kt)("h3",{id:"explanation-3"},"Explanation"),(0,r.kt)("p",null,"The first conference runs from minute $1$ to $5$. The second runs from minute $2$ to $3$, and thus conflicts with the first. The third runs from minute $2$ to $9$, and also conflicts with the first. The last one runs from minute $6$ to $7$ which does not conflict with any successfully processed sign-up. Note that as the second and third sign-ups conflicted with the first they are not considered processed."),(0,r.kt)("h2",{id:"example-5"},"Example 5"),(0,r.kt)("h3",{id:"input-4"},"Input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"3\n1 1\n2 1\n2 2\n")),(0,r.kt)("h3",{id:"output-4"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GOOD\nBAD\nBAD\n")),(0,r.kt)("h2",{id:"example-6"},"Example 6"),(0,r.kt)("h3",{id:"input-5"},"Input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"8\n7 6\n1 2\n10 15\n18 6\n24 3\n33 1\n13 3\n5 3\n")),(0,r.kt)("h3",{id:"output-5"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GOOD\nGOOD\nBAD\nGOOD\nBAD\nGOOD\nBAD\nBAD\n")),(0,r.kt)("h1",{id:"model-solution"},"Model Solution"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click to reveal"),(0,r.kt)("p",null,(0,r.kt)("h2",{id:"intuition"},"Intuition"),(0,r.kt)("p",null,"We first consider a subproblem: given exactly two conferences taking place between $","[a_1, b_1]","$ and $","[a_2, b_2]","$, is there any overlap?\nFor example, $","[1, 5]","$ and $","[3, 6]","$ overlap; $","[2, 7]","$ and $","[8, 9]","$ don't."),(0,r.kt)("p",null,"This problem reduces to checking whether the intersection of the two intervals $","[a_1, b_1]","$ and $","[a_2, b_2]","$ is non-empty,\nwhich can be solved using a bit of simple math."),(0,r.kt)("p",null,"(The method presented is not the only way to do it, but it is probably the shortest.)"),(0,r.kt)("p",null,"In particular, the intersection of two intervals $","[a_1, b_1]","$ and $","[a_2, b_2]","$ is given by:"),(0,r.kt)("p",null,"$$\n\\max(\\min(b_1, b_2) - \\max(a_1, a_2) + 1, 0)\n$$"),(0,r.kt)("p",null,"For example, consider the example of $","[1, 5]","$ and $","[3, 6]","$. We plug in these values to the equation:"),(0,r.kt)("p",null,"$$\n\\max(\\min(b_1, b_2) - \\max(a_1, a_2) + 1, 0)","\\","\n= \\max(\\min(5, 6) - \\max(1, 3) + 1, 0)","\\","\n= \\max(5 - 3 + 1, 0)","\\","\n= \\max(3, 0)","\\","\n= 3\n$$"),(0,r.kt)("p",null,"...and $3$ is indeed the size of the intersection of $","[1, 5]","$ and $","[3, 6]","$, which is $","[3, 5]","$."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"After solving this subproblem the larger problem becomes easy; all one needs to do is to maintain a list of all previously processed conference times.\nUpon receiving a new time, go through this list and see if any of them overlap. If so, it is bad; otherwise, it is good and should be marked as processed."),(0,r.kt)("h2",{id:"code"},"Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'def cmp_intersection(i0, i1):\n    return max(min(i1[1], i0[1]) - max(i1[0], i0[0]) + 1, 0)\n\nprocessed = []\nn = int(input())\nfor _ in range(n):\n    start, dur = map(int, input().split())\n    cur_time = (start, start + dur)\n    if any(cmp_intersection(prev_time, cur_time) > 0 for prev_time in processed):\n        print("BAD")\n    else:\n        print("GOOD")\n        processed.append(cur_time)\n')))))}s.isMDXComponent=!0}}]);