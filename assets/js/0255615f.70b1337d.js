"use strict";(self.webpackChunkbulldog_computer_club_website=self.webpackChunkbulldog_computer_club_website||[]).push([[497],{3905:(e,a,t)=>{t.d(a,{Zo:()=>o,kt:()=>u});var n=t(7294);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function m(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=n.createContext({}),l=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):p(p({},a),e)),t},o=function(e){var a=l(e.components);return n.createElement(i.Provider,{value:a},e.children)},c="mdxType",k={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},N=n.forwardRef((function(e,a){var t=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,o=m(e,["components","mdxType","originalType","parentName"]),c=l(t),N=s,u=c["".concat(i,".").concat(N)]||c[N]||k[N]||r;return t?n.createElement(u,p(p({ref:a},o),{},{components:t})):n.createElement(u,p({ref:a},o))}));function u(e,a){var t=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var r=t.length,p=new Array(r);p[0]=N;var m={};for(var i in a)hasOwnProperty.call(a,i)&&(m[i]=a[i]);m.originalType=e,m[c]="string"==typeof e?e:s,p[1]=m;for(var l=2;l<r;l++)p[l]=t[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}N.displayName="MDXCreateElement"},6856:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>p,default:()=>k,frontMatter:()=>r,metadata:()=>m,toc:()=>l});var n=t(7462),s=(t(7294),t(3905));const r={title:"Andrei's Excessive Distrohopping",sidebar_position:3},p="Andrei's Excessive Distrohopping",m={unversionedId:"archive/weekly-questions/andreis-excessive-distrohopping",id:"archive/weekly-questions/andreis-excessive-distrohopping",title:"Andrei's Excessive Distrohopping",description:"As a Linux user, Andrei enjoys trying out new distros regularly. After trying out a new distro, Andrei gives it a rating.",source:"@site/docs/archive/weekly-questions/andreis-excessive-distrohopping.md",sourceDirName:"archive/weekly-questions",slug:"/archive/weekly-questions/andreis-excessive-distrohopping",permalink:"/docs/archive/weekly-questions/andreis-excessive-distrohopping",draft:!1,editUrl:"https://github.com/bulldog-computer-club/bulldog-computer-club.github.io/edit/main/docs/archive/weekly-questions/andreis-excessive-distrohopping.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Andrei's Excessive Distrohopping",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Joe's Water Corporation",permalink:"/docs/archive/weekly-questions/joes-water-corporation"},next:{title:"Repeated String Transformation",permalink:"/docs/archive/weekly-questions/repeated-string-transformation"}},i={},l=[{value:"Input Specification",id:"input-specification",level:3},{value:"Output Specification",id:"output-specification",level:3},{value:"Example 1",id:"example-1",level:2},{value:"Input",id:"input",level:3},{value:"Output",id:"output",level:3},{value:"Explanation",id:"explanation",level:3},{value:"Example 2",id:"example-2",level:2},{value:"Input",id:"input-1",level:3},{value:"Output",id:"output-1",level:3},{value:"Explanation",id:"explanation-1",level:3},{value:"Example 3",id:"example-3",level:2},{value:"Input",id:"input-2",level:3},{value:"Output",id:"output-2",level:3},{value:"Explanation",id:"explanation-2",level:3},{value:"Model Solution",id:"model-solution",level:2},{value:"Tuple unpacking",id:"tuple-unpacking",level:2},{value:"Sets",id:"sets",level:2},{value:"<code>any()</code>",id:"any",level:2},{value:"<code>collections.Counter</code>",id:"collectionscounter",level:2}],o={toc:l},c="wrapper";function k(e){let{components:a,...t}=e;return(0,s.kt)(c,(0,n.Z)({},o,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"andreis-excessive-distrohopping"},"Andrei's Excessive Distrohopping"),(0,s.kt)("p",null,"As a Linux user, Andrei enjoys trying out new distros regularly. After trying out a new distro, Andrei gives it a rating."),(0,s.kt)("p",null,"Andrei's rating of a distro depends on two things: the number of key features that he likes and the dankness of its name. For example, Andrei might find a distro to be ",(0,s.kt)("em",{parentName:"p"},"simple")," (good) yet ",(0,s.kt)("em",{parentName:"p"},"slow")," (bad). Good features increase the distro's rating by ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"1")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1")))))," point, while bad ones decrease it by ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"0.5")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0.5")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0.5")))))," points."),(0,s.kt)("p",null,"To determine the dankness of a distro's name, Andrei uses the following criteria, in order."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"If there are at least 3 occurrences of the same letter in the distro name, it is ",(0,s.kt)("strong",{parentName:"li"},"very dank"),", which increases the distro's rating by ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"3")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"3")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"3")))))," points."),(0,s.kt)("li",{parentName:"ol"},"If the distro name contains a digit (",(0,s.kt)("inlineCode",{parentName:"li"},"0-9"),"), it is ",(0,s.kt)("strong",{parentName:"li"},"somewhat dank"),", which increases the distro's rating by ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"1")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1")))))," point."),(0,s.kt)("li",{parentName:"ol"},"Otherwise, it is ",(0,s.kt)("strong",{parentName:"li"},"undank"),", which decreases the distro's rating by ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"1")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1")))))," point.")),(0,s.kt)("p",null,"Write a program to determine Andrei's highest rated distro and its rating."),(0,s.kt)("h3",{id:"input-specification"},"Input Specification"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The first line of input is an integer ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"N")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"N")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N")))))," denoting the number of distros Andrei has tried."),(0,s.kt)("li",{parentName:"ul"},"The second line of input contains a list of features Andrei deems good, separated by spaces. Features are guaranteed to be lowercase strings, each under ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"80")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"80")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"80")))))," characters."),(0,s.kt)("li",{parentName:"ul"},"The third line of input contains a list of features Andrei deems bad, separated by spaces."),(0,s.kt)("li",{parentName:"ul"},"The next ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"N")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"N")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N")))))," lines of input each contain a distro name, then a list of features, separated by spaces. Distro names are guaranteed to be strings under ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"80")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"80")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"80")))))," characters, not containing spaces.")),(0,s.kt)("h3",{id:"output-specification"},"Output Specification"),(0,s.kt)("p",null,"The output will consist of two lines."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"On the first line, output the name of the distro that has the highest rating according to Andrei. If there is a tie, output the distro that appeared first."),(0,s.kt)("li",{parentName:"ul"},"On the second line, output the rating of the highest-rated distro.")),(0,s.kt)("h1",{id:"examples"},"Examples"),(0,s.kt)("h2",{id:"example-1"},"Example 1"),(0,s.kt)("h3",{id:"input"},"Input"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"5\nspeedy simple cool elegant sleek customizable\nslow boring complex uncustomizable\nKali cool elegant complex\nKubuntu sleek customizable slow\nDebian simple boring\nOpenSUSE speedy sleek uncustomizable\nMint simple boring uncustomizable\n")),(0,s.kt)("h3",{id:"output"},"Output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Kubuntu\n4.5\n")),(0,s.kt)("h3",{id:"explanation"},"Explanation"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Kubuntu")," contains ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"3")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"3")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"3")))))," ",(0,s.kt)("inlineCode",{parentName:"p"},"u"),"s, which makes it ",(0,s.kt)("strong",{parentName:"p"},"very dank"),", which increases its score from ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"0")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0")))))," to ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"3")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"3")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"3"))))),". As ",(0,s.kt)("inlineCode",{parentName:"p"},"sleek")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"customizable")," are good features, its score further increases to ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"3"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"5")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"3 + 1 + 1 = 5")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"3"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"5"))))),", but as ",(0,s.kt)("inlineCode",{parentName:"p"},"slow")," is a bad feature its score decreases to ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"4.5")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"4.5")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"4.5"))))),"."),(0,s.kt)("h2",{id:"example-2"},"Example 2"),(0,s.kt)("h3",{id:"input-1"},"Input"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"2\nfast\nslow\nArch fast\nManjaro fast\n")),(0,s.kt)("h3",{id:"output-1"},"Output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Arch\n0.0\n")),(0,s.kt)("h3",{id:"explanation-1"},"Explanation"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Arch")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Manjaro")," both have undank distro names but are fast, resulting in a score of ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"0")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"-1 + 1 = 0")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0"))))),". Despite the tie in score, Arch came first, and is thus outputted."),(0,s.kt)("h2",{id:"example-3"},"Example 3"),(0,s.kt)("h3",{id:"input-2"},"Input"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"2\ncool\nwarm\nDebian cool\nQ4OS cool\n")),(0,s.kt)("h3",{id:"output-2"},"Output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Q4OS\n2.0\n")),(0,s.kt)("h3",{id:"explanation-2"},"Explanation"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Q4OS")," has a digit in its name, making it somewhat dank. Moreover, it is cool, resulting in a score of ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"2")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"2")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"2")))))," points."),(0,s.kt)("h2",{id:"model-solution"},"Model Solution"),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Click to reveal"),(0,s.kt)("p",null,(0,s.kt)("p",null,"This problem is a fairly straightforward implementation problem; one simply has to read the problem statement carefully."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'from collections import Counter\nimport math\n\nn = int(input())\ngood_features, bad_features = set(input().split()), set(input().split())\nmax_name, max_score = "", -math.inf\nfor _ in range(n):\n    name, *features = input().split()\n    score = 0.0\n    if any(count >= 3 for count in Counter(name).values()):\n        # at least one character with >= 3 occurrences => very dank\n        score += 3\n    elif any(c.isdigit() for c in name):\n        # at least one character is a digit => somewhat dank\n        score += 1\n    else:\n        score -= 1\n    for f in features:\n        if f in good_features:\n            score += 1\n        else:\n            score -= 0.5\n    if score > max_score:\n        max_name, max_score = name, score\nprint(max_name)\nprint(max_score)\n')),(0,s.kt)("p",null,"To simplify (and speed up) the implementation, we use a couple of Python built-ins / features."),(0,s.kt)("h2",{id:"tuple-unpacking"},"Tuple unpacking"),(0,s.kt)("p",null,"Each line of the input contains a distro name and then a list of features. If we want to handle the distro name and the list of features separately, we could write the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'parts = input().split() # "Kubuntu sleek customizable slow" => ["Kubuntu", "sleek", "customizable", "slow"]\nname = parts[0] # "Kubuntu"\nfeatures = parts[1:] # ["sleek", "customizable", "slow"]\n')),(0,s.kt)("p",null,"If you check the model solution above, though, that is not what is used. Instead, there is the following line:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"name, *features = input().split()\n")),(0,s.kt)("p",null,"It turns out that this has essentially exactly the same effect as writing out the assignment manually, but is a lot more succinct."),(0,s.kt)("p",null,"This particular Python feature is called ",(0,s.kt)("em",{parentName:"p"},"iterable unpacking"),", and can be useful in cases like the above once you get used to it.\nIts name comes from the fact that it allows one to ",(0,s.kt)("em",{parentName:"p"},"unpack")," an iterable into individual variables;\nfor example, ",(0,s.kt)("inlineCode",{parentName:"p"},"a, b = [1, 2]")," results in ",(0,s.kt)("inlineCode",{parentName:"p"},"a = 1")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"b = 2"),"."),(0,s.kt)("p",null,"To unpack an unknown number of values, one can use the wildcard ",(0,s.kt)("inlineCode",{parentName:"p"},"*"),", which results in a list. For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"a, *b = [1, 2, 3, 4] # a = 1, b = [2, 3, 4]\n")),(0,s.kt)("h2",{id:"sets"},"Sets"),(0,s.kt)("p",null,"Sets are unordered collections of unique elements. In the model solution, we use them for keeping track of good and bad features."),(0,s.kt)("p",null,"They can be declared using the literal syntax ",(0,s.kt)("inlineCode",{parentName:"p"},"{a, b, c}")," or using the ",(0,s.kt)("inlineCode",{parentName:"p"},"set()")," function."),(0,s.kt)("p",null,"The main strength of sets is their very fast membership checks.\nIn other words, sets are fast at determining whether they include some element."),(0,s.kt)("p",null,"To demonstrate this, here is a quick benchmark comparing the performance of the ",(0,s.kt)("inlineCode",{parentName:"p"},"in")," operator for sets and lists:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'>>> def in_test(iterable):\n...     for i in range(1000):\n...         if i in iterable:\n...             pass\n...\n>>> from timeit import timeit\n>>> timeit(\n...     "in_test(iterable)",\n...     setup="from __main__ import in_test; iterable = set(range(1000))",\n...     number=10000)\n0.5591847896575928\n>>> timeit(\n...     "in_test(iterable)",\n...     setup="from __main__ import in_test; iterable = list(range(1000))",\n...     number=10000)\n50.18339991569519\n')),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"(taken from this ",(0,s.kt)("a",{parentName:"em",href:"https://stackoverflow.com/questions/2831212/python-sets-vs-lists/17945009#17945009"},"StackOverflow answer"),")")),(0,s.kt)("p",null,"As you can see, ",(0,s.kt)("inlineCode",{parentName:"p"},"set")," is essentially an order of magnitude faster than ",(0,s.kt)("inlineCode",{parentName:"p"},"list")," when using ",(0,s.kt)("inlineCode",{parentName:"p"},"in"),"."),(0,s.kt)("h2",{id:"any"},(0,s.kt)("inlineCode",{parentName:"h2"},"any()")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"any()"),", as its name suggests, checks whether ",(0,s.kt)("em",{parentName:"p"},"any")," elements of a sequence satisfy some predicate.\nTo understand what this means, consider the expression:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"any(c.isdigit() for c in name)\n")),(0,s.kt)("p",null,'You can probably guess what it does just by reading it (such is idiomatic Python), but if you can\'t, read it as "if any character in name is a digit".'),(0,s.kt)("p",null,"It is equivalent to:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"any_digit = False\nfor c in name:\n    if c.isdigit():\n        any_digit = True\n        break\n")),(0,s.kt)("p",null,"...but evidently a lot shorter."),(0,s.kt)("h2",{id:"collectionscounter"},(0,s.kt)("inlineCode",{parentName:"h2"},"collections.Counter")),(0,s.kt)("p",null,"The last interesting part of the model solution is the usage of ",(0,s.kt)("inlineCode",{parentName:"p"},"collections.Counter")," to determine whether any character occurs at least 3 times."),(0,s.kt)("p",null,"Though we will talk about it and more generally dictionaries in-depth in future meetings, in brief, a ",(0,s.kt)("inlineCode",{parentName:"p"},"Counter")," allows one to track the number of occurrences of elements."),(0,s.kt)("p",null,"A self-explanatory example can be found in the Python documentation for it:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},">>> # Tally occurrences of words in a list\n>>> cnt = Counter()\n>>> for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:\n...     cnt[word] += 1\n>>> cnt\nCounter({'blue': 3, 'red': 2, 'green': 1})\n")),(0,s.kt)("p",null,"For more information, take a look at ",(0,s.kt)("a",{parentName:"p",href:"https://realpython.com/python-counter/"},"this article")," from Real Python."))))}k.isMDXComponent=!0}}]);