"use strict";(self.webpackChunkbulldog_computer_club_website=self.webpackChunkbulldog_computer_club_website||[]).push([[612],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),p=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(u,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},s),{},{components:n})):a.createElement(h,i({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(4334);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(7462),r=n(7294),o=n(4334),i=n(2466),l=n(6550),u=n(1980),p=n(7392),s=n(12);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[u,p]=h({queryString:n,groupId:a}),[c,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,s.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),g=(()=>{const e=u??c;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),k(e)}),[p,k,o]),tabValues:o}}var g=n(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:l,selectValue:u,tabValues:p}=e;const s=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=s.indexOf(t),a=p[n].value;a!==l&&(c(t),u(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=s.indexOf(e.currentTarget)+1;t=s[n]??s[0];break}case"ArrowLeft":{const n=s.indexOf(e.currentTarget)-1;t=s[n]??s[s.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>s.push(e),onKeyDown:m,onClick:d},i,{className:(0,o.Z)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=k(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",f.tabList)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function N(e){const t=(0,g.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},4199:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var a=n(7462),r=(n(7294),n(3905)),o=n(4866),i=n(5162);const l={title:"Input and Output",sidebar_position:4},u=void 0,p={unversionedId:"archive/ccc/input-and-output",id:"archive/ccc/input-and-output",title:"Input and Output",description:"Though there are many different types of problems on the CCC, all of them have one thing in common -- you read some data from standard input, solve the problem given the input, and output an answer to standard output.",source:"@site/docs/archive/ccc/input-and-output.mdx",sourceDirName:"archive/ccc",slug:"/archive/ccc/input-and-output",permalink:"/docs/archive/ccc/input-and-output",draft:!1,editUrl:"https://github.com/bulldog-computer-club/bulldog-computer-club.github.io/edit/main/docs/archive/ccc/input-and-output.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Input and Output",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"What is the CCC?",permalink:"/docs/archive/ccc/what-is-ccc"},next:{title:"Fast I/O",permalink:"/docs/archive/ccc/fast-io"}},s={},c=[{value:"Reading Input",id:"reading-input",level:2},{value:"Writing Output",id:"writing-output",level:2},{value:"Exact Output",id:"exact-output",level:3}],d={toc:c},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Though there are many different types of problems on the CCC, all of them have one thing in common -- you read some data from standard input, solve the problem given the input, and output an answer to standard output."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"We list only the most common and general approaches to reading input here for simplicity.\nOn certain CCC problems, the input size may be large, in which case you should use ",(0,r.kt)("a",{parentName:"p",href:"./fast-io"},"fast I/O"),".")),(0,r.kt)("h2",{id:"reading-input"},"Reading Input"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"py",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"In Python, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"input()")," function to read one line from standard input."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"line = input()\n")),(0,r.kt)("p",null,"If an integer/float value is desired, convert it manually."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"i = int(input())\nf = float(input())\n")),(0,r.kt)("p",null,"Sometimes, input data will contain several items on a single line.\nFor example, a problem might provide several integers separated by whitespace, like such:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1 2 3 4 5\n")),(0,r.kt)("p",null,"In these cases, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"str.split")," method to break the string into its components."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'parts = input().split(" ")\n# parts = ["1", "2", "3", "4", "5"]\n')),(0,r.kt)("p",null,"This may be written more succintly as"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'parts = input().split() # splits around whitespace\n# parts = ["1", "2", "3", "4", "5"]\n')),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"str.split")," will return a list of strings, while we might wish to work with a list of integers instead.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," function can accomplish this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"ints = map(int, input().split())\n# parts = [1, 2, 3, 4, 5]\n"))),(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("p",null,"In Java, use ",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.Scanner")," to read from standard input."),(0,r.kt)("p",null,"Start by instantiating a ",(0,r.kt)("inlineCode",{parentName:"p"},"Scanner"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Scanner scanner = new Scanner(System.in);\n")),(0,r.kt)("p",null,"Then, use one of the ",(0,r.kt)("inlineCode",{parentName:"p"},"next")," methods to read values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"int i = sc.nextInt();\nfloat f = sc.nextFloat();\ndouble d = sc.nextDouble();\nString line = sc.nextLine();\n"))),(0,r.kt)(i.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("p",null,"In C++, use ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cin")," to read from standard input."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int a;\nlong double ld;\nlong long ll;\ncin >> a >> ld >> ll;\n")),(0,r.kt)("p",null,"Note that using ",(0,r.kt)("inlineCode",{parentName:"p"},">>")," with a string, like such:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"string s;\ncin >> s;\n")),(0,r.kt)("p",null,"...will only read up to the first whitespace character, which may be undesirable.\nThat is, if the input was ",(0,r.kt)("inlineCode",{parentName:"p"},"hello world"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," would be ",(0,r.kt)("inlineCode",{parentName:"p"},'"hello"'),", not ",(0,r.kt)("inlineCode",{parentName:"p"},'"hello world"'),"."),(0,r.kt)("p",null,"To read a complete line of input, use ",(0,r.kt)("inlineCode",{parentName:"p"},"getline"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'string s;\ngetline(cin, s); // s is "hello world"\n')))),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"When solving problems, ",(0,r.kt)("strong",{parentName:"p"},"do not")," issue a prompt for input unless it is explicitly stated that you should do so in the problem statement.\nThis is because the CCC grader will ",(0,r.kt)("strong",{parentName:"p"},"treat your prompt as output and therefore mark it as incorrect"),"."),(0,r.kt)("p",{parentName:"admonition"},"For example, say we are solving a problem which takes a single input, the age."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Correct")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-py"},"age = int(input())\n# ...\n")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Incorrect")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-py"},'age = int(input("What is your age?"))\n\n# Also wrong:\nprint("What is your age?")\nage = int(input())\n'))),(0,r.kt)("h2",{id:"writing-output"},"Writing Output"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"py",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"In Python, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"print")," function to write to standard output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'print("Hello world") # Hello world\n\nname = "Joe"\nprint("Hello", name) # Hello Joe\n\nprint(1, 2, 3) # 1 2 3\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"print")," will add a newline to the end by default. To avoid this, provide a different argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"end")," parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"print(\"Hello world\", end='') # No newline\n")),(0,r.kt)("p",null,"To print a sequence of items, map into a sequence of strings and then use ",(0,r.kt)("inlineCode",{parentName:"p"},"str.join"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'names = ["Vincent", "Andrei", "Joe"]\nprint(" ".join(names)) # Vincent Andrei Joe\n\nxs = [1, 2, 3]\nprint(" ".join(map(str, xs))) # 1 2 3\n'))),(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("p",null,"In Java, use ",(0,r.kt)("inlineCode",{parentName:"p"},"System.out")," to write to standard output."),(0,r.kt)("p",null,"In particular, to write to standard output with a trailing newline, use ",(0,r.kt)("inlineCode",{parentName:"p"},"System.out.println"),".\nIf a newline is undesirable, use ",(0,r.kt)("inlineCode",{parentName:"p"},"System.out.print"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'System.out.println("hello world!"); // hello world!\nSystem.out.print(1); // 1, without a trailing newline\n')),(0,r.kt)("p",null,"To print a sequence of items, map it into a sequence of strings and then use ",(0,r.kt)("inlineCode",{parentName:"p"},"String.join"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String[] names = {"Vincent", "Andrei", "Joe"};\nSystem.out.println(String.join(", ", names)); // Vincent, Andrei, Joe\n'))),(0,r.kt)(i.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("p",null,"In C++, use ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cout")," to write to standard output."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"cout << \"Hello world\" << '\\n';\n")),(0,r.kt)("p",null,"C++ will not add a trailing newline automatically; you will need to output it yourself if needed."),(0,r.kt)("admonition",{title:"Outputting Newlines",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"As a general rule, prefer to use ",(0,r.kt)("inlineCode",{parentName:"p"},"'\\n'")," instead of the ",(0,r.kt)("inlineCode",{parentName:"p"},"std::endl")," I/O manipulator.\nThis has to do with performance: ",(0,r.kt)("inlineCode",{parentName:"p"},"endl")," flushes the stream which can slow down your program significantly if the output is large.\nOther than that, there is no difference between ",(0,r.kt)("inlineCode",{parentName:"p"},"'\\n'")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"std::endl"),".")),(0,r.kt)("p",null,"There are a number of ways to output a vector using standard algorithms, but the easiest way is to just use a loop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> xs{1, 2, 3, 4};\nfor (int i = 0; i < xs.size(); i++) {\n    if (i > 0) cout << ' ';\n    cout << xs[i];\n}\ncout << '\\n';\n")),(0,r.kt)("admonition",{title:"Floating-Point Values",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"When outputting floating point values, C++ may choose to switch to scientific notation:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"double d = 1'000'000'000;\ncout << d << '\\n'; // 1e+09\n")),(0,r.kt)("p",{parentName:"admonition"},"This is undesirable for the CCC, as most problems expect floating point values to be outputted using fixed point notation.\nThat is, the above value should be outputted as ",(0,r.kt)("inlineCode",{parentName:"p"},"1000000000"),".\nThus, your otherwise correct solution might be marked incorrect!"),(0,r.kt)("p",{parentName:"admonition"},"To prevent this issue, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"fixed")," I/O manipulator:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"double d = 1'000'000'000;\ncout << fixed << d << '\\n'; // 1000000000\n"))))),(0,r.kt)("h3",{id:"exact-output"},"Exact Output"),(0,r.kt)("p",null,"Can you spot the difference between these two outputs?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1 2 3 \n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1 2 3\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click to reveal"),(0,r.kt)("p",null,(0,r.kt)("p",null,"The first output has a trailing space after the ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),"."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Unless otherwise specified, output must be exact!")),(0,r.kt)("p",null,"That is, outputting the first text instead of the second in the example given above would be marked incorrect.\nNo matter how miniscule, unless otherwise noted, any difference between your output and the expected output results in your solution being marked incorrect."),(0,r.kt)("p",null,"Make sure your output matches the requirements exactly. Some things to check for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Are you outputting periods where you're not supposed to (or vice versa)?"),(0,r.kt)("li",{parentName:"ul"},"Are you outputting strings in the wrong case (",(0,r.kt)("inlineCode",{parentName:"li"},"Yes")," instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"yes"),")?"),(0,r.kt)("li",{parentName:"ul"},"Are you outputting an extra newline somewhere?")))}h.isMDXComponent=!0}}]);