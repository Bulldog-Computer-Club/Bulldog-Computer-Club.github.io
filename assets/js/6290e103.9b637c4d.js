"use strict";(self.webpackChunkbulldog_computer_club_website=self.webpackChunkbulldog_computer_club_website||[]).push([[580],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),r=n(7294),i=n(6010),o=n(2389),l=n(7392),s=n(7094),u=n(2466);const c="tabList__CuJ",p="tabItem_LNqP";function d(e){var t;const{lazy:n,block:o,defaultValue:d,values:m,groupId:f,className:b}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??y.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,l.l)(h,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===d?d:d??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==v&&!h.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,s.U)(),[C,N]=(0,r.useState)(v),O=[],{blockElementScrollPositionUntilNextRender:T}=(0,u.o5)();if(null!=f){const e=k[f];null!=e&&e!==C&&h.some((t=>t.value===e))&&N(e)}const E=e=>{const t=e.currentTarget,n=O.indexOf(t),a=h[n].value;a!==C&&(T(t),N(a),null!=f&&w(f,String(a)))},I=e=>{var t;let n=null;switch(e.key){case"Enter":E(e);break;case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;n=O[t]??O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;n=O[t]??O[O.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},b)},h.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>O.push(e),onKeyDown:I,onClick:E},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":C===t})}),n??t)}))),n?(0,r.cloneElement)(y.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function m(e){const t=(0,o.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},8642:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),i=n(5488),o=n(5162);const l={title:"Fast I/O",sidebar_position:5},s=void 0,u={unversionedId:"ccc/fast-io",id:"ccc/fast-io",title:"Fast I/O",description:"Certain CCC questions have fairly large amounts of input, which can cause an otherwise fast solution to become bogged down and time out simply reading all the input.",source:"@site/docs/ccc/fast-io.mdx",sourceDirName:"ccc",slug:"/ccc/fast-io",permalink:"/docs/ccc/fast-io",draft:!1,editUrl:"https://github.com/bulldog-computer-club/bulldog-computer-club.github.io/edit/main/docs/ccc/fast-io.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Fast I/O",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Input and Output",permalink:"/docs/ccc/input-and-output"},next:{title:"Algorithmic Analysis",permalink:"/docs/ccc/algorithmic-analysis"}},c={},p=[],d={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Certain CCC questions have fairly large amounts of input, which can cause an otherwise fast solution to become bogged down and time out simply reading all the input."),(0,r.kt)("p",null,"Luckily, there's a solution -- ",(0,r.kt)("em",{parentName:"p"},"fast I/O"),', which is, as the name suggests, a faster way of reading input and writing output than the "normal" way.'),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"py",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"Instead of using ",(0,r.kt)("inlineCode",{parentName:"p"},"input()"),", read directly from ",(0,r.kt)("inlineCode",{parentName:"p"},"sys.stdin"),"."),(0,r.kt)("p",null,"One of the ways you can do this is to simply redefine ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," to refer to ",(0,r.kt)("inlineCode",{parentName:"p"},"sys.stdin.readline"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"input = sys.stdin.readline\n# Use input() as normal\n"))),(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("p",null,"Instead of using ",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.Scanner"),", use a ",(0,r.kt)("inlineCode",{parentName:"p"},"java.io.BufferedReader")," combined with a ",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.StringTokenizer"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n// Read an integer on one line\nint i = Integer.parseInt(br.readLine());\n\n// Read several integers on the same line\nStringTokenizer st = new StringTokenizer(br.readLine());\nwhile (st.hasMoreTokens()) {\n    int i = Integer.parseInt(st.nextToken());\n}\n"))),(0,r.kt)(o.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("p",null,"Using the C standard library functions ",(0,r.kt)("inlineCode",{parentName:"p"},"scanf")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"printf")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cout")," is quite fast, but can be somewhat unwieldy and error-prone."),(0,r.kt)("p",null,"To speed up ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"std::cout"),", add the following lines at the beginning of your code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"ios_base::sync_with_stdio(false);\ncin.tie(nullptr);\n")),(0,r.kt)("p",null,"Then, use ",(0,r.kt)("inlineCode",{parentName:"p"},"cin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"cout")," as usual."))))}m.isMDXComponent=!0}}]);